import React, { useEffect, useState } from "react";
import Axios from 'axios'
import { useHistory } from 'react-router-dom';
import Button from '@material-ui/core/Button';
import moment from 'moment'
import Moment from 'react-moment'
import 'moment-timezone'
import Recordw from './display_record'
import './display.css'

var start_time = 0;
var Arrival_Time = 0;
var datenew = 0, day = 0;
var location = "";
var travel_time = 0;

function Activity_view() {
  const [Name, setName] = useState('');
  const [Hotel, setHotel] = useState([]);
  const [Temp, settemp] = useState([]);
  const [Act, Setactivities] = useState('');
  const [Activity_total, Setactivity_total] = useState('');
  const [Mode, SetMode] = useState('');
  const [ModeDetails, setModeDetails] = useState({});
  const [Details, setDetails] = useState({});
  const [checkin_time, getcheckin_time] = useState('');
  const [time, set_time] = useState('');
  const [timingsn, settimings] = useState([]);
  const [scheduleDate, setScheduleDate] = useState(null);

  const [records, setRecords] = useState([]);
  const [fixedRecords, setFixedRecords] = useState({});
  
  //get username
  useEffect(() => {

    Axios.get("http://localhost:3001/temp").then((response) => {
      //console.log("inside temp");
      setName(response.data[0].username);
      //console.log("inside temp :" + Name);
    });
  }, []);

  //get list of user selected activities
  useEffect(() => {
    if (Name === '') return;
    //console.log("Inside functions");
    Axios.post("http://localhost:3001/get_activities", {
      username: Name,
    }).then((response) => {
      //console.log("inside response ")
      //console.log(response);
      var Activities = response.data;
      Setactivities(Activities[0].activities);
      //console.log(Activities[0].activities);
    });
  }, [Name]);

  //get hotel details of the user
  useEffect(() => {
    if (Name === '') return;
    //console.log("Inside Hotel");
    Axios.post("http://localhost:3001/get_accomodation_details", {
      username: Name,
    }).then((response) => {
      //console.log("inside hotel details")
      //console.log(response.data[0]);
      setHotel(response.data[0]);
    });
  }, [Name]);

  //get details of each activity
  useEffect(() => {
    if (Act === '') return;
    //console.log(Act);
    var newString = Act.split(",");
    //console.log("newString is : " +newString);

    //Capture promises of all requests to read the data
    var promises = [];
    var i;

    for (i = 0; i < newString.length; i++) {
      console.log("iteration" + i);
      console.log(newString[i]);
      const myobject = {
        activity: newString[i],
      }

      promises.push(Axios.post("http://localhost:3001/get_activities_details", myobject)
        .then((res) => res.data[0]));
    }

    Promise.all(promises)
      .then((data) => {
        settemp(data)
        console.log("Got data", data)
      })
      .catch((e) => console.error(e));
  }, [Act]);


  //get the mode of travel and travel details
  useEffect(() => {
    if (Name === '') return;
    console.log('AAAA7 N', Name);
    //console.log("Inside Travel Mode name is : "+Name);
    Axios.post("http://localhost:3001/get_travel_mode", {
      username: Name,
    }).then((response) => {
      //console.log("inside travel details")
      //console.log("mode is " , response.data[0].Mode);
      SetMode(response.data[0].Mode);
      if (response.data[0].Mode === "Flight") {
        Axios.post("http://localhost:3001/get_flight", {
          username: Name,
        }).then((response) => {
          //console.log(response.data[0]);
          setModeDetails(response.data[0]);
          console.log('AAAA7 M1', response.data);
          var airline = response.data[0].Airlines;
          var FlightClass = response.data[0].FlightClass;
          var State = response.data[0].State;
          var date = response.data[0].Date;
          Axios.post("http://localhost:3001/get_flight_details", {
            airline: airline,
            class: FlightClass,
            state: State,
            date: date,
          }).then((response) => {
            //console.log(response.data[0]);
            console.log('AAAA7 M2', response.data);
            setDetails(response.data[0]);

          });
        });
      }
      else if (response.data[0].Mode === "Bus") {
        Axios.post("http://localhost:3001/get_bus", {
          username: Name,
        }).then((response) => {
          //console.log(response);
          setModeDetails(response.data[0]);
          var date = response.data[0].Date1;
          //var temp=moment.utc('2019-11-03T05:00:00.000Z').format('MM/DD/YYYY');

          var State = response.data[0].State;
          Axios.post("http://localhost:3001/get_bus_details", {
            date: date,
            state: State,
          }).then((response) => {
            //console.log(response.data[0]);
            console.log('AAAA7 M3', response.data);
            setDetails(response.data[0]);
            console.log('AAAA7 M3 2', response.data);

          });
        });
      }
      else {
        Axios.post("http://localhost:3001/get_train", {
          username: Name,
        }).then((response) => {
          //console.log(response.data[0]);
          setModeDetails(response.data[0]);
          var date = response.data[0].Date;
          var State = response.data[0].State;
          var tclass = response.data[0].Class;
          Axios.post("http://localhost:3001/get_train_details", {
            date: date,
            state: State,
            tclass: tclass,
          }).then((response) => {
            //console.log(response.data[0]);
            //setDetails(response.data[0]);
          });
        });
      }

    });
  }, [Name]);
  // console.log("outside");

  useEffect(() => {
    if (ModeDetails === '') return;
    if (Hotel === '') return;
    var dst = ModeDetails.Destination;
    const hotel = Hotel.Hotel_Name;
    Axios.post("http://localhost:3001/get_destination", {
      dst: dst,
      hotel: hotel,
    }).then((response) => {
      console.log("response of get destination is", response);
      console.log("Time is : ", response.data[0]);
      var temp = response.data[0];
      //console.log("temp is  : ", temp);
      //setDetails(response.data[0]);
      for (var key in temp) {
        if (temp.hasOwnProperty(key)) {
          //console.log(key); // 'a'
          //console.log(temp[key]); // 'hello'
          getcheckin_time(temp[key])
          //time=temp[key];
        }
      }
      console.log("checkin_time is " + checkin_time);
    });
  }, [ModeDetails, Hotel])

  useEffect(() => {
    console.log("Temp timing:", Temp);

    var city = Hotel.Hotel_City;

    let promises = Temp.map(e => {
      const act = e.Activity_Name;
      const cty = city;

      city = e.Activity_City; //Update next city in activity chain
      return Axios.post("http://localhost:3001/get_travel_time", {
        act: act,
        place: cty
      });
    });

    Promise.all(promises)
      .then(responses => responses.map(response => Object.entries(response.data[0]).flat()[1]))
      .then(timings => {
        let curr_time = scheduleDate;
        console.log("AAAA", curr_time);
        if (!curr_time) return [];
        return timings.map((t, i, a) => {
          const tDiff = moment.duration(t, "HH:mm:ss");
          const act_time = i >= 1 ? Temp[i - 1].Activity_Time : 0;
          curr_time = curr_time.add(tDiff).add(act_time, 'hours');
          ///check curr_time > 18:00, curr_time = curr_time.add(12 'hours')
          const hours = moment(curr_time, "HH:mm").format('HH');
          console.log("Hours : " + hours);
          if (hours > 20) {
            //      console.log("Inside if")
            //curr_time=curr_time.add(10,'hours');//.format('YYYY-MM-DD H:mm:ss A');
            //console.log(curr_time);
            //      console.log("ntime : "+ntime);
            //      //curr_time=ntime;
            //      //curr_time=moment(ntime).format('YYYY-MM-DD H:mm:ss A');
            console.log("curr time after change : ", moment(curr_time).format('YYYY-MM-DD H:mm:ss A'));
          }
          console.log("AAAA", act_time, moment(curr_time).format('YYYY-MM-DD H:mm:ss A'));
          return moment(curr_time).format('YYYY-MM-DD H:mm:ss A');
        });
      })
      .then(datetimes => datetimes.map((elem, i, a) => {
        let curr_time = moment(elem, 'YYYY-MM-DD H:mm:ss A');
        return {
          ActDate: curr_time.format('YYYY-MM-DD H:mm:ss A'),
          TravelTime: curr_time.format('H:mm A'),
          ActDay: get_day(curr_time.day())
        }
      }
      ))
      .then(acts_timing => {
        setRecords(Temp.map((e, i, a) => {
          return {
            Activity_Name: e.Activity_Name,
            Activity_City: e.Activity_City,
            day: acts_timing[i].ActDay,
            date: acts_timing[i].ActDate,
            travel_time: acts_timing[i].TravelTime
          };
        }))
      });
  }, [Temp, scheduleDate, Hotel]);

  const get_day = (num) => {
    let day;
    if (num == 7) {
      day = "Sunday";
    }
    else if (num == 1) {
      day = "Monday";
    }
    else if (num == 2) {
      day = "Tuesday";
    }
    else if (num == 3) {
      day = "Wednesday"
    }
    else if (num == 4) {
      day = "Thursday"
    }
    else if (num == 5) {
      day = "Friday"
    }
    else if (num == 6) {
      day = "Saturday"
    }
    return day;
  }

  useState(() => {console.log("AAAA7, a", Details)}, [Details])

  useState(() => {
    const i = 0;

    var arrival_date = Details.Arrival_Date;
    Arrival_Time = Details.Arrival_Time;

    var Departure_Time = Details.Departure_Time;
    var Departure_Date = Details.Departure_Date;

    var temp_hours = moment(Arrival_Time, "HH:mm").format('hh');
    //console.log("arrival date : " + arrival_date);
    var temp = moment.utc(arrival_date).format('YYYY-MM-DD');
    var dpdate = moment.utc(Departure_Date).format('YYYY-MM-DD');
    var temp_hours2 = moment(Departure_Time, "HH:mm").format('hh:mm');
    var datenew2 = moment(dpdate).add(temp_hours2, 'hh:mm').format('YYYY-MM-DD H:mm:ss A');

    datenew = moment(temp).add(temp_hours, 'hours').format('YYYY-MM-DD H:mm:ss A');

    const lastSchedule = moment(datenew).add(checkin_time, 'HH:mm:ss');
    const lastScheduleDate = lastSchedule.format('YYYY-MM-DD H:mm:ss A');
    console.log('AAAA7', Details);
    console.log("AAAA7", arrival_date, datenew, lastScheduleDate);
    setScheduleDate(lastSchedule);
    //console.log("j is : " + j);

    const date = moment(temp); // Thursday Feb 2015
    const a = date.day();

    //console.log('usingMoment: date.day() ==> ',a);
    const day = get_day(a);

    //console.log("Day is : " +day);
    const start_date = moment(temp);
    //console.log("start date : "+temp);
    //console.log("Day : " +temp.isoWeekday());
    var atime = moment(Arrival_Time, "HH:mm").format('hh:mm A');
    start_time = moment(atime, "HH:mm").add(checkin_time, 'hh:mm').format('HH:mm A');
    var dtime = moment(Departure_Time, "HH:mm").format('hh:mm A');
    var temp_hours = moment(Arrival_Time, "HH:mm").format('hh');
    //console.log("temp hours : "+temp_hours);

    var date_with_time = date.add(16, 'hours').format('YYYY-MM-DD H:mm:ss A');
    //console.log("date with time : "+date_with_time);

    //console.log("Start Time : " + start_time);
    const new1 = date.add(4, 'hours').format('HH:mm');
    const mday = moment(new1).format('YYYY-MM-DD');
    const nday = moment(mday);
    //console.log("new date : "+mday);
    //console.log("new day is: " +nday.day());
    const new_time = moment(new1, "HH:mm").format('HH:mm');
    //console.log("New Time : " + new_time);
    //console.log("before record");
    //b = 0;
    location = Hotel.Hotel_City;

    //counter = 0;
    // console.log("Timing 1 : " ,timingsn[0]);
    // console.log("Timing 2 : " ,timingsn[1]);
    // console.log("Timing 3 : " ,timingsn[2]);
    //var timing1 = timingsn[0];
    //console.log("timing1 : " + timing1);
    //var new_t = moment(timing1, 'HH:mm:ss').format('HH:mm:ss');
    //console.log("new t is : " + new_t);

    //travel_time = moment(start_time, "HH:mm").add(new_t, 'HH:mm:ss').format('HH:mm A');
    //console.log("Travel time 1 is : " + travel_time);

    const aaa = {
      datenew: datenew,
      datenew2: datenew2,
      atime: atime,
      dtime: dtime,
      lastScheduleDate: lastScheduleDate,
      start_time: start_time
    };
    console.log("AAAA7 A", aaa)
    setFixedRecords(aaa);

  }, [ModeDetails, Details, Hotel, checkin_time]);

  //Iternary table data
  const GenerateIternary = (props) => {
    const { preset } = props;
    const { datenew, atime, dtime, datenew2, lastScheduleDate, start_time } = preset;
    console.log("inside iternary");
    return (
      <>
        <Recordw activity="Departure" day={day} place={Details.Departure_From + ", " + Details.Departure_State} date={datenew2 || ''} time={dtime || ''} />
        <Recordw activity="Arrival" day={day} place={ModeDetails.Destination} date={datenew || ''} time={atime || ''} />
        <Recordw activity="Check in" day={day} place={Hotel.Hotel_Name + ", " + Hotel.Hotel_City} date={lastScheduleDate || ''} time={start_time || ''} />

        {
          records.map(activity =>
            <Recordw
              activity={activity.Activity_Name}
              day={activity.day}
              place={activity.Activity_City}
              date={activity.date} time={activity.travel_time}
            />
          )
        }
      </>
    );
  };

  return (
    <>
      <div>
        {/* <h2>Activity List</h2>
        
        <table className="table">
            <thead>
                <tr>
                    <th>Activity Id</th>
                    <th>Activity Name</th>
                    <th>Activity Duration</th>
                    <th>Activity Category</th>
                    <th>Activity price</th>
               </tr>
            </thead>
            <tbody>
                {Temp.map(activity => (
                    <tr key={activity.Activity_ID}>
                        <td>{activity.Activity_ID}</td>
                        <td>{activity.Activity_Name}</td>
                        <td>{activity.Activity_Time}</td>
                        <td>{activity.Activity_Category}</td>
                        <td>{activity.Price}</td>
                    </tr>
                ))}
            </tbody>
        </table>
      <h3 align="left" >Total Activity Price:  {Activity_total}</h3>
       </div>
       <div>
        <h2>Hotel Details</h2>
       <table className="table">
            <thead>
                <tr>
                    <th>Hotel ID</th>
                    <th>Hotel Name</th>
                    <th>Hotel Price</th>
                    <th>No of Days</th>
                    <th>No of Nights</th>
               </tr>
            </thead>
            <tbody>
                        <td>{Hotel.Hotel_ID}</td>
                        <td>{Hotel.Hotel_Name}</td>
                        <td>{Hotel.Hotel_Price}</td>
                        <td>{Hotel.Days}</td>
                        <td>{Hotel.Nights}</td>
            </tbody>
        </table>
    </div>
    <div>
        <h2>Travel Details</h2>
        <div align="center"><h4>Mode Of Transport :{Mode}</h4></div>
        <div>
       
        </div>
        <div>
        <table className="table">
           <thead>
                <tr>
                    <th>Date</th>
                    <th>Boarding Stop</th>
                    <th>Destination</th>
                    <th>No of Travellers</th>
                    <th>From</th>
               </tr>
            </thead>
            <tbody>
                        <td>{ModeDetails.Date}</td>
                        <td>{ModeDetails.Boarding}</td>
                        <td>{ModeDetails.Destination}</td>
                        <td>{ModeDetails.Traveller}</td>
                        <td>{ModeDetails.State}</td>
            </tbody>
        </table>
          {console.log("Details are : " , Details)}
        </div>

        <div>
        <table className="table">
           <thead>
                <tr>
                    <th>Name</th>
                    <th>Departure_Date</th>
                    <th>Departure_State</th>
                    <th>DEparture_Time</th>
                    <th>Class</th>
                    <th>Price</th>
                    <th>Arrival Date</th>
                    <th>Arrival Time</th>
               </tr>
            </thead>
            <tbody>
                        <td>{Details.Name}</td>
                        <td>{Details.Departure_Date}</td>
                        <td>{Details.Departure_State}</td>
                        <td>{Details.Departure_Time}</td>
                        <td>{Details.Class}</td>
                        <td>{Details.Price}</td>
                        <td>{Details.Arrival_Date}</td>
                        <td>{Details.Arrival_Time}</td>
            </tbody>
        </table>
        </div> */}
        <div className="iternary_table">
          <table className="table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Time</th>
                <th>Day</th>
                <th>Activity</th>
                <th>Place</th>
              </tr>
            </thead>
            <tbody>
              <GenerateIternary preset={fixedRecords} />
            </tbody>
          </table>
        </div>
      </div>
    </>)

}
export default Activity_view;